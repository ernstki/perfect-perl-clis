# slideshow environment setup
#
# if you install https://github.com/kennethreitz/autoenv, this will be sourced
# automatically when you enter the subdirectory where this file lives

# minimum number of lines for all the slides to look right
MINLINES=22

# add 'lib' to the PERL5LIB, 'bin' to the PATH
PERL5LIB=$PWD/lib${PERL5LIB:+:$PERL5LIB}
PATH=$PWD/bin:$PATH

# terminal colors; see 'man tput'
# ref: https://linuxtidbits.wordpress.com/2008/08/11/output-color-on-bash-scripts/
UL=$(tput sgr 0 1)
BOLD=$(tput bold)
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
BLUE=$(tput setaf 4)
MAGENTA=$(tput setaf 5)
WHITE=$(tput setaf 7)
RESET=$(tput sgr0)
WARNING="$BOLD${YELLOW}GASP!$RESET"
ERROR="$BOLD${RED}BOO$RESET,"

LANG='en_US.UTF-8'
LC_ALL='en_US.UTF-8'
# only show the last path element in the prompt ('\W')
PROMPT_DIRTRIM=1

# make a custom prompt w/ green/red smileys indicating command success/failure
# see also: http://mywiki.wooledge.org/BashFAQ/053
SMILEY='\[${GREEN}\]:)\[${RESET}\]'
FROWNEY='\[${RED}\]:(\[${RESET}\]'
CWD='[\[${MAGENTA}\]\W\[${RESET}\]]'
PS1_HAPPY="$CWD $SMILEY $ "
PS1_SAD="$CWD $FROWNEY $ "

# smiley if previous command completed successfully; frowny face otherwise
# ref: https://bash.cyberciti.biz/guide/Changing_bash_prompt
PROMPT_COMMAND="(( \$? )) && PS1=\$PS1_SAD || PS1=\$PS1_HAPPY${PROMPT_COMMAND:+;$PROMPT_COMMAND}"

# keep track of the current slide
export SLIDE=0

# aliases
# 'shuf' on macOS comes from MacPorts' 'coreutils'
# h/t: https://apple.stackexchange.com/a/142864
alias shuf='gshuf'

# the longer slides won't fit on the screen if fewer than 22 rows
if (( LINES < MINLINES )); then
    echo "Your terminal size needs a bump (LINES < $MINLINES)." >&2
fi

# get the filename for a slide given the slide number
get_slide() {
    local TRACE=${TRACE:-0}
    local slidenum slide

    # default to current $SLIDE, or 0 if no args given
    (( TRACE )) && set -x
    if [[ $# -gt 0 && -n $1 ]]; then
        slidenum=$1
    else
        slidenum=${SLIDE:-0}
    fi
    (( TRACE )) && set +x

    # if first argument is an integer
    if [[ $slidenum =~ [^0-9] ]]; then
        echo "$ERROR expected an integer for SLIDENUM." >&2
        return 1
    fi

    # AND that slide exists; FIXME: what if glob returns multiple files?
    (( TRACE )) && set -x
    slide="slides/$(printf '%02d*.md' $slidenum)"
    (( TRACE )) && set +x

    if ! find $slide &>/dev/null; then
        echo "$ERROR slide #$slidenum ('$slide') does not exist." >&2
        return 1
    fi

    echo "$slide"
} # get_slide

# rudimentary Markdown viewer using the 'display_file' function from
# https://github.com/tj/mad
markdownify() {
    local file=
    local forcepager=
    local forcenopager=

    while (( $# )); do
        case $1 in
            -p|--pager)
                forcenopager=
                forcepager=1
                ;;
			-np|--no-pager)
                forcepager=
				forcenopager=1
				;;
			*)
				if [[ -r $1 ]]; then
					file=$1
				else
					echo "$ERROR: '$1' is not a (readable) file" >&2
					return 1
				fi
				;;
        esac
        shift
    done

    # here be dragons
    local perl='#line 120
        use utf8;
        $inverse    = "\e[7m";
        $invoff     = "\e[27m";
        $bold       = "\e[1m";
        $boldoff    = "\e[22m";
        $ul         = "\e[4m";
        $uloff      = "\e[24m";
        $black      = "\e[30m";
        $yellow     = "\e[33m";
        $blue       = "\e[34m";
        $magenta    = "\e[35m";
        $grey       = "\e[90m";      # "bright black"
        $brightblue = "\e[94m";
        $whitebg    = "\e[47m";
        $greybg     = "\e[97;100m";  # bright white on bright black
        $coloroff   = "\e[39m";
        $reset      = "\e[0m";

        $strong     = $bold;
        $endstrong  = $boldoff;
        $em         = $ul;
        $endem      = $uloff;
        $firsthead  = $inverse;
        $h1         = $inverse;
        $h2         = $bold . $ul;
        $h3         = $ul;
        $code       = $brightblue;
        $endcode    = $coloroff;
        $cblock     = $greybg;
        $endcblock  = $coloroff;
        $comment    = $grey;  # comments within code blocks
        $endcomment = $coloroff;
        $link       = $yellow . $ul;
        $endlink    = $uloff . $coloroff;

        use Term::ReadKey;
        ($termcols, $termrows) = Term::ReadKey::GetTerminalSize();
        $firstheader = 0;
        $lines = 0;

        while (<>) {
            $lines++;
            # headlines
            if (!$firstheader && /^#+ *(.+)/) {
                # pad to terminal width with spaces
                $_ = "  $1" . " " x ($termcols - length($1) - 2);
                print "$firsthead$_$reset\n";
                $lines++;
                $firstheader = 1;
                next;
            } else {
                s/^##? *((?!#).+)/$h2\1$reset/;
                s/^###+ *(.+)/$h3\1$reset/;
            }

            # ASCII art (indented six spaces)
            #if (/^ {6}/) {
            #    print;
            #    next;
            #}

            # code blocks (indented 4 spaces, but not a list item)
            if (/^ {4}(?![-*] )/) {
                # pad to terminal width with spaces
                # TODO: give code blocks a background color
                # chomp;
                # $_ .= " " x ($termcols - length($_) - 8);
                # s/  (.*)/  $cblock\1$cblockend\n/;
                s/(#.*)$/$comment\1$endcomment/;
                print;
                next;
            }

            # FIXME: code duplication
            # code blocks (indented 8 spaces, but not a list item)
            #if (/^ {4}(?![-*] )/) {
            #    # pad to terminal width with spaces
            #    $_ = "  $1" . " " x ($termcols - length($1) - 2);
            #    s/(#.*)$/$comment\1$endcomment/;
            #    print;
            #    next;
            #}

            # other typography
            s/`(.+?)`/`$code\1$endcode`/g;
            s/\*\*(.+?)\*\*/$strong\1$endstrong/g;
            s/\*(.+?)\*/$em\1$endem/g;
            # matching on non-underscore characters ignores ASCII art
            s/__([^_]+?)__/$strong\1$endstrong/g;
            s/_([^_]+?)_/$em\1$endem/g;

            # other elements: links, hard breaks
            if (/<br>/) {
                print "\n\n";
                $lines++;
                next;
            }
            # ignore some HTML tags
            s/<\/?(tt|abbr).*?>//g;
            # strip other ones out entirely
            s/<\/?detail.*>//g;
            # mailto: links
            s/<mailto:(.+?)>/<$link\1$endlink>/g;
            # other links
            s/<(.+?)>/$link\1$endlink/g;

            # finally, indent every line two spaces
            # if ($firstheader) {
            s/^/  /;
            print;
        }

        # pad to (almost) the bottom of the terminal
        print "\n" x ($termrows - $lines - 1);
    '

    # 'less' opts; quit if one screen (-F), quit at second EOF (-e), quit at
    # first EOF (-E), raw (-R), don't terminal init/deinit (clear after quit)
    # (-X), don't draw ~s (-~), full-screen repaint, top line down (-c)
	if (( forcenopager )); then
    	perl -e "$perl" "$file"
    elif (( forcepager )); then
    	perl -e "$perl" "$file" | less -RX
    else
        # quit if only one screen
    	# perl -e "$perl" "$file" | less -FRX
    	perl -e "$perl" "$file"
    fi
} # markdownify

# render the current slide; render slide # if given as argument
slide() {
    # mdless is 'less' for Markdown files; https://github.com/ttscoff/mdless
    # local viewer='mdless --no-pager'
    local mdviewer='markdownify'
    local slidenum=${SLIDE:-0}

    # while we have arguments ($# is the number of arguments)
    while (( $# )); do
        case $1 in
             -p|--p*)
                 mdviewer="$mdviewer --pager"
                 ;;
            # +c|-C|-nc|--no-c*)
            #     mdless+=' --no-color'
            #     ;;
            *)
                slidenum=$1
                ;;
        esac

        # shift '$1' off the argument stack
        shift
    done

    slide=$( get_slide $slidenum )
    local ret=$?

    if [[ $? -ne 0 || -z $slide ]]; then
        echo -n "$WARNING Problem invoking 'get_slide' (slide='$slide'; " >&2
        echo "\$?=$ret)." >&2
        return 1
    fi

    # if that worked, update $SLIDE environment variable and display it
    SLIDE=$slidenum
    clear
    $mdviewer $slide  # don't quote because we need wildcards to expand
} # slide

# shortcut for 'slide'
alias s='slide'

# edit a slide by number
vs() {
    local slide=
    if slide=$(get_slide $1); then
        ${VISUAL:-${EDITOR:-vim}} $slide
    fi
} # vs

# insert a number of slides before a specific slide
is() {
    local file= basename=
    local before=0       # insert before this slide #
    local insert=1       # insert this many
    local slides=slides  # where to find the slides
    [[ $PWD =~ /slides ]] && slides=.
    local total=$(ls $slides/[0-9]* | awk -F[/_] 'END{print $2}')

    case $# in
        0)
            ;;
        1)
            before=$1;;
        2)
            before=$1; insert=$2;;
        *)
            echo "$ERROR expected zero, one, or two integer arguments" >&2
            echo "(insert before slide #, # of slides to insert)" >&2
            return 1;;
    esac

    for i in $(seq $total $before); do
        file=$(find $slides/$(printf "%02d_*" $i) 2>/dev/null);
        if [[ -z $file ]]; then
            echo "$WARNING no slide #$i found. Skipping." >&2
            continue
        elif [[ $file =~ [[:space:]] ]]; then
            echo "$ERROR found more than one slide #$i. Bailing out." >&2
            return 1
        fi
        basename=${file#*/[0-9][0-9]_}
        echo mv $file $(printf "$slides/%02d_$basename" $((i+insert)))
    done
}

# advance to next slide
n() {
    SLIDE=$(( SLIDE + 1 ))
    slide $SLIDE || SLIDE=$(( SLIDE - 1 ))
}

# rewind to previous slide
b() {
    SLIDE=$(( SLIDE - 1 ))
    slide $SLIDE || SLIDE=$(( SLIDE + 1 ))
}

# vim: ft=sh
